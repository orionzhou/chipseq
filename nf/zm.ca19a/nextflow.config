launchDir = "$proj/barn/chipseq/zm.ca19a"
workDir = "$NXF_CACHE/work/chipseq/zm.ca19a"

includeConfig "$nf/configs/nextflow.config"
includeConfig "$nf/configs/fastq.config"
includeConfig "$nf/configs/chipseq.config"

params {
  genome = 'Zmays_B73v5'
  lib = 'atacseq'
  name = 'zm.ca19a'
  design = 'design.tsv'
  source = 'local'
  read_type = 'illumina'
  paired = 'PE'
  outdir = "./raw"
  tracedir = "./pipeline_info"
  stranded = 'no'
  interleaved = false
  save_fastq = false
  trimmer = "trim_galore"
  save_trimmed = false
  aligner = "bwa"
  saveBAM = false
  skip_preseq = true
  skip_markdup = true
}

process {
  withName:trim_galore {
    cpus = 1
    memory = 50.GB
    time = 40.h
  }
  withName:bwa {
    queue = 'amdsmall,amdlarge,amd512,amd2tb,ram256g,ram1t'
    cpus = 4
    memory = 160.GB
    time = 35.h
  }
  withName:hs2 {
    cpus = 4
    memory = 55.GB
    time = 5.h
  }
  withName:mqc {
    cpus = 1
    memory = 35.GB
    time = 15.h
  }
}

def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
